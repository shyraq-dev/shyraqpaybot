# bot_pay_products_admin_fixed.py
import os
import asyncio
import logging
from datetime import datetime, UTC
from typing import Optional
import aiosqlite
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import CommandStart, Command, CommandObject

# ------------------ –ë–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª—ã“õ –±–∞–ø—Ç–∞—É–ª–∞—Ä (ORTA / ENV –∞—Ä“õ—ã–ª—ã –±–µ—Ä—ñ–ª–µ–¥—ñ) ------------------
# –ï—à“õ–∞—à–∞–Ω —Ç—ñ–∫–µ–ª–µ–π –∫–æ–¥“õ–∞ —Ç–æ–∫–µ–Ω –∂–∞–∑–±–∞“£—ã–∑ ‚Äî –æ—Ä—Ç–∞ –∞–π–Ω—ã–º–∞–ª—ã –∞—Ä“õ—ã–ª—ã –æ—Ä–Ω–∞—Ç—ã“£—ã–∑.
MIN_AMOUNT_XTR = 1
MAX_AMOUNT_XTR = 10000
BOT_TOKEN = os.getenv("BOT_TOKEN", "BOT_TOKEN_HERE")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")  # Telegram payment provider token (Stars “Ø—à—ñ–Ω –±–æ—Å –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω)
ADMIN_ID = int(os.getenv("ADMIN_ID", "ID_HERE"))  # ”ô–∫—ñ–º—à—ñ–Ω—ñ“£ Telegram ID (–æ“õ—à–∞—É–ª–∞–Ω“ì–∞–Ω –æ—Ä—Ç–∞–¥–∞ –æ—Ä–Ω–∞—Ç—ã“£—ã–∑)
CURRENCY = os.getenv("CURRENCY", "XTR")  # –í–∞–ª—é—Ç–∞ (Stars = XTR)
DB_PATH = os.getenv("DB_PATH", "payments.db")

# ------------------ Aiogram init ------------------
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
router = Router()
dp.include_router(router)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ FSM –∫“Ø–π—ñ (–¥–æ–Ω–µ–π—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω —Å“±—Ä–∞“ì–∞–Ω–¥–∞) ------------------
class Donate(StatesGroup):
    waiting_for_message = State()
    waiting_for_amount = State()
    waiting_for_custom_amount = State()

# ------------------ DB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        # products: “±—Å—ã–Ω—ã—Å—Ç–∞—Ä/–∂–∞–∑—ã–ª—ã–º–¥–∞—Ä/–ø–∞–∫–µ—Ç—Ç–µ—Ä
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT,
                amount INTEGER NOT NULL,
                currency TEXT NOT NULL,
                duration_days INTEGER DEFAULT 0,
                active INTEGER DEFAULT 1
            )
            """
        )
        # payments: –Ω–∞“õ—Ç—ã —Ç”©–ª–µ–º –∂–∞–∑–±–∞—Å—ã (“õ–æ–ª–¥–∞—É —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã “Ø—à—ñ–Ω message –±–∞“ì–∞–Ω—ã “õ–æ—Å—ã–ª–¥—ã)
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                product_id INTEGER,
                amount INTEGER NOT NULL,
                currency TEXT,
                charge_id TEXT UNIQUE,
                date TEXT,
                refunded INTEGER DEFAULT 0,
                message TEXT
            )
            """
        )
        # subscriptions: –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –∂–∞–∑—ã–ª—ã–º–¥–∞—Ä—ã
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                product_id INTEGER,
                start_date TEXT,
                expiry_date TEXT
            )
            """
        )
        # refunds: –ª–æ–∫–∞–ª –∂—É—Ä–Ω–∞–ª
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS refunds (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                charge_id TEXT,
                admin_id INTEGER,
                reason TEXT,
                date TEXT
            )
            """
        )
        # pending_donations: —Ç”©–ª–µ–º–≥–µ –¥–µ–π—ñ–Ω–≥—ñ –¥–æ–Ω–µ–π—Ç —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω —Å–∞“õ—Ç–∞—É (payload-“õ–∞ —Å—ñ–ª—Ç–µ–º–µ –∂–∞—Å–∞–π–º—ã–∑)
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS pending_donations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                amount INTEGER NOT NULL,
                message TEXT,
                created_at TEXT
            )
            """
        )
        await db.commit()
    logger.info("DB initialized.")

# ------------------ Helper: fetch products ------------------
async def get_active_products(limit: int = 50):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT id, title, description, amount, currency, duration_days FROM products WHERE active=1 ORDER BY id ASC LIMIT ?",
            (limit,),
        ) as cur:
            rows = await cur.fetchall()
    return rows

# ------------------ –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä: START / HELP ------------------
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–°”ô–ª–µ–º! –ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã ”©–Ω—ñ–º–¥–µ—Ä–¥—ñ (–∂–∞–∑—ã–ª—ã–º/–ø–∞–∫–µ—Ç) —Å–∞—Ç—ã–ø –∞–ª—É“ì–∞ –±–æ–ª–∞–¥—ã.\n"
        "–ü–∞–π–¥–∞–ª–∞–Ω—É:\n"
        "/pay ‚Äî ”©–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ\n"
        "/premium ‚Äî ”©–∑ –∂–∞–∑—ã–ª—ã–º—ã“£ —Ç—É—Ä–∞–ª—ã\n\n"
        "”ò–∫—ñ–º—à—ñ–ª–µ—Ä: /admin"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "<b>üìò “ö–æ–ª–∂–µ—Ç—ñ–º–¥—ñ –ø”ô—Ä–º–µ–Ω–¥–µ—Ä:</b>\n"
        "/start ‚Äî –±–æ—Ç—Ç—ã –±–∞—Å—Ç–∞—É –∂”ô–Ω–µ –º”ô–∑—ñ—Ä–≥–µ ”©—Ç—É\n"
        "/pay ‚Äî ”©–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –∂”ô–Ω–µ —Å–∞—Ç—ã–ø –∞–ª—É\n"
        "/premium ‚Äî Premium / –∂–∞–∑—ã–ª—ã–º –∫“Ø–π—ñ–Ω –∫”©—Ä—É\n"
        "/donate ‚Äî –±–æ—Ç—Ç—ã –∂“±–ª–¥—ã–∑ (Stars) –∞—Ä“õ—ã–ª—ã “õ–æ–ª–¥–∞—É\n"
        "/help ‚Äî –∫”©–º–µ–∫ –ø–µ–Ω –ø”ô—Ä–º–µ–Ω–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ\n\n"
        "<b>üëë ”ò–∫—ñ–º—à—ñ –ø”ô—Ä–º–µ–Ω–¥–µ—Ä—ñ:</b>\n"
        "/stats ‚Äî –∂–∞–ª–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/refund [ID] ‚Äî —Ç”©–ª–µ–º–¥—ñ “õ–∞–π—Ç–∞—Ä—É\n"
        "/add_product [–∞—Ç–∞—É—ã]|[–±–∞“ì–∞—Å—ã]|[–∫“Ø–Ω–¥–µ—Ä]|[—Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã] ‚Äî –∂–∞“£–∞ ”©–Ω—ñ–º “õ–æ—Å—É\n"
        "/edit_product [id]|[–∞—Ç–∞—É—ã]|[–±–∞“ì–∞—Å—ã]|[–∫“Ø–Ω–¥–µ—Ä]|[—Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã] ‚Äî ”©–Ω—ñ–º–¥—ñ ”©–∑–≥–µ—Ä—Ç—É\n"
        "/set_product_status [id] [0|1] ‚Äî ”©–Ω—ñ–º–¥—ñ “õ–æ—Å—É/”©—à—ñ—Ä—É\n"
        "/delete_product [id] ‚Äî ”©–Ω—ñ–º–¥—ñ –∂–æ—é\n"
        "/mark_refund [charge_id] ‚Äî —Ç”©–ª–µ–º–¥—ñ “õ–∞–π—Ç–∞—Ä—ã–ª“ì–∞–Ω –¥–µ–ø –±–µ–ª–≥—ñ–ª–µ—É"
    )

# ------------------ PAY: ”©–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –∂”ô–Ω–µ —Å–∞—Ç—ã–ø –∞–ª—É ------------------
@router.message(Command("pay"))
async def cmd_pay(message: Message):
    products = await get_active_products()
    if not products:
        return await message.answer("“ö–∞–∑—ñ—Ä “±—Å—ã–Ω—ã—Å—Ç–∞—Ä –∂–æ“õ. –ö–µ–π—ñ–Ω—ñ—Ä–µ–∫ “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.")

    # ”ô—Ä ”©–Ω—ñ–º–≥–µ –∂–µ–∫–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂”ô–Ω–µ –°–∞—Ç—ã–ø –∞–ª—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
    for p in products:
        pid, title, desc, amount, currency, duration_days = p
        # amount ‚Äî raw smallest unit (Stars –∂–∞“ì–¥–∞–π–¥–∞ 1 = 1 XTR)
        text = f"<b>{title}</b>\n{desc or ''}\n\n–°–æ–º–∞: <code>{amount}</code> {currency}"
        if duration_days and duration_days > 0:
            text += f"\n–ú–µ—Ä–∑—ñ–º—ñ: {duration_days} –∫“Ø–Ω"

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõí –°–∞—Ç—ã–ø –∞–ª—É", callback_data=f"buy:{pid}")]
            ]
        )
        await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.startswith("buy:"))
async def buy_callback(callback: CallbackQuery):
    await callback.answer()
    try:
        pid = int(callback.data.split(":", 1)[1])
    except Exception:
        return await callback.message.answer("”®–Ω—ñ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã “õ–∞—Ç–µ.")

    # ”©–Ω—ñ–º–¥—ñ DB-–¥–∞–Ω –∂“Ø–∫—Ç–µ—É
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT title, description, amount, currency FROM products WHERE id = ? AND active = 1", (pid,)
        ) as cur:
            row = await cur.fetchone()

    if not row:
        return await callback.message.answer("”®–Ω—ñ–º —Ç–∞–±—ã–ª–º–∞–¥—ã –Ω–µ–º–µ—Å–µ –±–µ–ª—Å–µ–Ω–¥—ñ –µ–º–µ—Å.")

    title, description, amount, currency = row
    prices = [LabeledPrice(label=title, amount=amount)]
    payload = f"product:{pid}"  # –∫–µ–π—ñ–Ω–≥—ñ ”©“£–¥–µ—É–¥–µ “õ–æ–ª–¥–∞–Ω–∞–º—ã–∑

    # provider_token ‚Äî ENV –∞—Ä“õ—ã–ª—ã –±–µ—Ä—ñ–ª–µ–¥—ñ (–±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª—ã“õ “õ–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫)
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title=title,
        description=description or "-",
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
    )


# ------------------ DONATE –ø”ô—Ä–º–µ–Ω—ñ ------------------
@router.message(Command("donate"))
async def cmd_donate(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="”®—Ç–∫—ñ–∑—É ‚û°Ô∏è", callback_data="skip_message")]
    ])
    await message.answer(
        "üí¨ –î–æ–Ω–∞—Ç–ø–µ–Ω –±—ñ—Ä–≥–µ “õ–∞–Ω–¥–∞–π —Ö–∞–±–∞—Ä–ª–∞–º–∞ “õ–∞–ª–¥—ã—Ä“ì—ã“£ –∫–µ–ª–µ–¥—ñ?\n"
        "(–ú—ã—Å–∞–ª—ã: ¬´–ë–æ—Ç “±–Ω–∞–¥—ã!¬ª)\n\n"
        "“ö–∞–ª–∞–º–∞—Å–∞“£, —Ç”©–º–µ–Ω–¥–µ–≥—ñ ¬´”®—Ç–∫—ñ–∑—É¬ª –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å.",
        reply_markup=keyboard
    )
    await state.set_state(Donate.waiting_for_message)


# ------------------ ”®—Ç–∫—ñ–∑—É –±–∞—Ç—ã—Ä–º–∞—Å—ã ------------------
@router.callback_query(F.data == "skip_message")
async def skip_donate_message(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(user_message=None)
    await state.set_state(Donate.waiting_for_amount)
    await _show_amount_buttons(callback.message)


# ------------------ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂–∞–∑—ã–ª“ì–∞–Ω –∂–∞“ì–¥–∞–π–¥–∞ ------------------
@router.message(Donate.waiting_for_message)
async def donate_message_received(message: Message, state: FSMContext):
    user_message = (message.text or "").strip()
    await state.update_data(user_message=user_message)
    await state.set_state(Donate.waiting_for_amount)
    await _show_amount_buttons(message)


# ------------------ –°–æ–º–∞ —Ç–∞“£–¥–∞—É –±–∞—Ç—ã—Ä–º–∞–ª–∞—Ä—ã (3 “õ–∞—Ç–∞—Ä) ------------------
async def _show_amount_buttons(target):
    amounts = [1, 2, 5, 10, 20, 50, 100, 500, 1000]
    buttons = []
    row = []
    for i, amt in enumerate(amounts, start=1):
        row.append(InlineKeyboardButton(text=f"{amt} ‚≠ê", callback_data=f"donate:{amt}"))
        if i % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)

    buttons.append([InlineKeyboardButton(text="–ë–∞—Å“õ–∞ —Å–æ–º–∞ ‚úèÔ∏è", callback_data="donate:custom")])

    await target.answer(
        "üí∞ –î–æ–Ω–∞—Ç —Å–æ–º–∞—Å—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )


# ------------------ –¢–∞“£–¥–∞–ª“ì–∞–Ω —Å–æ–º–∞ ------------------
@router.callback_query(lambda c: c.data.startswith("donate:"))
async def donate_amount_selected(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = callback.data.split(":")[1]

    if data == "custom":
        await callback.message.answer(f" üì• –°–æ–º–∞“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ ({MIN_AMOUNT_XTR}-{MAX_AMOUNT_XTR} ‚≠ê):")
        await state.set_state(Donate.waiting_for_custom_amount)
        return

    amount = int(data)
    await _send_invoice(callback.message, amount, state)


# ------------------ Custom —Å–æ–º–∞ –µ–Ω–≥—ñ–∑—É ------------------
@router.message(Donate.waiting_for_custom_amount)
async def donate_custom_amount(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text.isdigit():
        return await message.answer("‚ùå –°–æ–º–∞ —Ç–µ–∫ –±“Ø—Ç—ñ–Ω —Å–∞–Ω –±–æ–ª—É—ã –∫–µ—Ä–µ–∫. “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

    amount = int(text)
    if amount < MIN_AMOUNT_XTR:
        return await message.answer(f"‚ö†Ô∏è –ï“£ –∞–∑ –¥–æ–Ω–∞—Ç {MIN_AMOUNT_XTR} ‚≠ê.")
    if amount > MAX_AMOUNT_XTR:
        return await message.answer(f"‚ö†Ô∏è –ï“£ –∫”©–ø –¥–æ–Ω–∞—Ç {MAX_AMOUNT_XTR} ‚≠ê.\n–ö”©–±—ñ—Ä–µ–∫ –±–µ—Ä–≥—ñ“£ –∫–µ–ª—Å–µ ‚Äî –±—ñ—Ä–Ω–µ—à–µ —Ä–µ—Ç –∂—ñ–±–µ—Ä–µ –∞–ª–∞—Å—ã“£ üòâ")

    await _send_invoice(message, amount, state)


# ------------------ Invoice –∂—ñ–±–µ—Ä—É ------------------
async def _send_invoice(message_or_callback, amount: int, state: FSMContext):
    user_id = message_or_callback.from_user.id
    state_data = await state.get_data()
    user_message = state_data.get("user_message", None)
    await state.clear()

    created_at = datetime.now(UTC).strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "INSERT INTO pending_donations (user_id, amount, message, created_at) VALUES (?, ?, ?, ?)",
            (user_id, amount, user_message, created_at)
        )
        await db.commit()
        pending_id = cur.lastrowid

    prices = [LabeledPrice(label="–ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞—É ‚≠ê", amount=amount)]
    payload = f"donation:{pending_id}"

    desc = f"üíå –•–∞–±–∞—Ä–ª–∞–º–∞: {user_message}" if user_message else "“ö–æ–ª–¥–∞—É “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç ‚ù§Ô∏è"

    try:
        await message_or_callback.answer_invoice(
            title="–ë–æ—Ç—Ç—ã “õ–æ–ª–¥–∞—É üå†",
            description=desc,
            payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency=CURRENCY,
            prices=prices,
            start_parameter="donate_support"
        )
    except Exception as e:
        logging.exception("Invoice –∂—ñ–±–µ—Ä—É —Å”ô—Ç—Å—ñ–∑")
        await message_or_callback.answer(f"‚ùå –¢”©–ª–µ–º –±–∞—Å—Ç–∞—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã: {e}")


# ------------------ –¢”©–ª–µ–º —Å”ô—Ç—Ç—ñ –±–æ–ª“ì–∞–Ω —Å–æ“£ ------------------
@router.message(F.successful_payment)
async def successful_payment(message: Message):
    sp = message.successful_payment
    user = message.from_user

    payload = getattr(sp, "invoice_payload", None)
    pending_id = None
    if payload and payload.startswith("donation:"):
        try:
            pending_id = int(payload.split(":")[1])
        except Exception:
            pending_id = None

    amount = sp.total_amount
    currency = sp.currency
    charge_id = sp.telegram_payment_charge_id

    async with aiosqlite.connect(DB_PATH) as db:
        user_message = None
        if pending_id:
            async with db.execute("SELECT message FROM pending_donations WHERE id=?", (pending_id,)) as cur:
                row = await cur.fetchone()
                if row:
                    user_message = row[0]
        await db.execute(
            "INSERT INTO payments (user_id, amount, currency, charge_id, message, date) VALUES (?, ?, ?, ?, ?, ?)",
            (user.id, amount, currency, charge_id, user_message, datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"))
        )
        await db.commit()

    # ‚úÖ –ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ –∂–∞—É–∞–ø
    msg_to_user = f"‚úÖ –¢”©–ª–µ–º —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ!\nüí∞ –°–æ–º–∞: {amount} ‚≠ê"
    if user_message:
        msg_to_user += f"\nüíå –•–∞–±–∞—Ä–ª–∞–º–∞: {user_message}"
    await message.answer(msg_to_user)

    # üëë ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä
    msg_to_admin = (
        f"üåü –ñ–∞“£–∞ –¥–æ–Ω–∞—Ç!\n"
        f"üë§ @{user.username or user.full_name} ({user.id})\n"
        f"üí∞ {amount} ‚≠ê\n"
    )
    if user_message:
        msg_to_admin += f"üíå {user_message}\n"
    msg_to_admin += f"Transaction ID: {charge_id}"

    try:
        await message.bot.send_message(ADMIN_ID, msg_to_admin)
    except Exception:
        logging.exception("Admin —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã–Ω –∂—ñ–±–µ—Ä—É —Å”ô—Ç—Å—ñ–∑")

# ------------------ Pre-checkout ------------------
@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: PreCheckoutQuery):
    # “ö–∞—Ä–∞–ø–∞–π—ã–º —Ä”ô—Å—ñ–º, “õ–∞–∂–µ—Ç—Ç—ñ –≤–∞–ª–∏–¥–∞—Ü–∏—è–Ω—ã –æ—Å—ã–Ω–¥–∞ “õ–æ—Å—É“ì–∞ –±–æ–ª–∞–¥—ã
    await pre_checkout_query.answer(ok=True)

# -----------------------------------------
# –ë—ñ—Ä “ì–∞–Ω–∞ —Å”ô—Ç—Ç—ñ —Ç”©–ª–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ñ (–±–∞—Ä–ª—ã“õ successful payments –æ—Å—ã –∂–µ—Ä–¥–µ ”©“£–¥–µ–ª–µ–¥—ñ)
# -----------------------------------------
@router.message(F.successful_payment)
async def handle_successful_payment(message: Message):
    sp: SuccessfulPayment = message.successful_payment
    user = message.from_user

    # payload –∞–ª—É (—Ç”ô–∂—ñ—Ä–∏–±–µ–ª–µ—Ä–¥–µ ”ô—Ä—Ç“Ø—Ä–ª—ñ –∂–µ—Ä–¥–µ –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω)
    payload = None
    try:
        payload = getattr(sp, "invoice_payload", None) or getattr(message, "invoice_payload", None)
    except Exception:
        payload = None

    amount = sp.total_amount  # raw integer
    currency = sp.currency
    charge_id = sp.telegram_payment_charge_id
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    product_id: Optional[int] = None
    user_message: Optional[str] = None

    # –ï–≥–µ—Ä payload ”©–Ω—ñ–º–≥–µ –∂–∞—Ç—Å–∞:
    if payload and isinstance(payload, str) and payload.startswith("product:"):
        try:
            product_id = int(payload.split(":", 1)[1])
        except Exception:
            product_id = None

    # –ï–≥–µ—Ä –±“±–ª –¥–æ–Ω–µ–π—Ç –±–æ–ª—Å–∞:
    if payload and isinstance(payload, str) and payload.startswith("donation:"):
        try:
            pending_id = int(payload.split(":", 1)[1])
        except Exception:
            pending_id = None
        if pending_id:
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute(
                    "SELECT user_id, message FROM pending_donations WHERE id = ?", (pending_id,)
                ) as cur:
                    prow = await cur.fetchone()
                if prow:
                    # –±—ñ–∑ –∂–∞–π “ì–∞–Ω–∞ —Å–∞“õ—Ç–∞—É–ª—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞–Ω—ã –ø–∞–π–¥–∞–ª–∞–Ω–∞–º—ã–∑
                    user_message = prow[1]
                # –æ—á–∏—Å—Ç–∫–∞ pending (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±—ñ—Ä–∞“õ “±“õ—ã–ø—Ç—ã)
                await db.execute("DELETE FROM pending_donations WHERE id = ?", (pending_id,))
                await db.commit()

    # DB: payments –µ–Ω–≥—ñ–∑—É
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO payments (user_id, product_id, amount, currency, charge_id, date, message) VALUES (?, ?, ?, ?, ?, ?, ?)",
            (user.id, product_id, amount, currency, charge_id, now_str, user_message),
        )
        # –ï–≥–µ—Ä ”©–Ω—ñ–º –±–æ–ª—Å–∞ –∂”ô–Ω–µ –æ–Ω—ã“£ duration_days > 0 –±–æ–ª—Å–∞ ‚Äî –∂–∞–∑—ã–ª—ã–º –∫–µ—Å—Ç–µ—Å—ñ–Ω–µ –∂–∞–∑—É
        if product_id:
            async with db.execute("SELECT duration_days FROM products WHERE id = ? AND active = 1", (product_id,)) as cur:
                prow = await cur.fetchone()
            if prow:
                duration_days = prow[0] or 0
                if duration_days > 0:
                    start = datetime.utcnow()
                    expiry = start + timedelta(days=duration_days)
                    await db.execute(
                        "INSERT INTO subscriptions (user_id, product_id, start_date, expiry_date) VALUES (?, ?, ?, ?)",
                        (user.id, product_id, start.strftime("%Y-%m-%d %H:%M:%S"), expiry.strftime("%Y-%m-%d %H:%M:%S")),
                    )
        await db.commit()

    # –•–∞–±–∞—Ä–ª–∞–º–∞ —Å–∞—Ç—ã–ø –∞–ª—É—à—ã“ì–∞
    msg = (
        f"‚úÖ –¢”©–ª–µ–º —Å”ô—Ç—Ç—ñ ”©—Ç—Ç—ñ!\n"
        f"Transaction ID: <code>{charge_id}</code>\n"
        f"–°–æ–º–∞—Å—ã (raw): <code>{amount}</code> {currency}\n"
    )
    if product_id:
        msg += f"–°–∞—Ç—ã–ø –∞–ª—ã–Ω“ì–∞–Ω ”©–Ω—ñ–º ID: <code>{product_id}</code>\n"
    if user_message:
        msg += f"–°—ñ–∑–¥—ñ“£ —Ö–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑: {user_message}\n"

    await message.answer(msg)

    # ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞—É
    try:
        uname = f"@{user.username}" if user.username else f"{user.full_name} ({user.id})"
        await bot.send_message(
            ADMIN_ID,
            f"üîî <b>–ñ–∞“£–∞ —Ç”©–ª–µ–º</b>\n"
            f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã: {uname}\n"
            f"product_id: {product_id} | amount: {amount} {currency}\n"
            f"charge_id: {charge_id}\n"
            + (f"message: {user_message}\n" if user_message else ""),
        )
    except Exception:
        logger.exception("Admin notify failed")

# ------------------ PREMIUM: –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã ”©–∑ –∂–∞–∑—ã–ª—ã–º—ã–Ω —Ç–µ–∫—Å–µ—Ä—É ------------------
@router.message(Command("premium"))
async def cmd_premium(message: Message):
    uid = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT expiry_date, product_id FROM subscriptions WHERE user_id = ? ORDER BY id DESC LIMIT 1", (uid,)
        ) as cur:
            row = await cur.fetchone()

    if not row:
        return await message.answer("–°—ñ–∑–¥–µ –±–µ–ª—Å–µ–Ω–¥—ñ –∂–∞–∑—ã–ª—ã–º –∂–æ“õ. /pay –∞—Ä“õ—ã–ª—ã –∂–∞–∑—ã–ª—ã“£—ã–∑.")

    expiry_str, product_id = row
    expiry = datetime.strptime(expiry_str, "%Y-%m-%d %H:%M:%S")
    now = datetime.utcnow()
    if expiry > now:
        remaining = expiry - now
        days = remaining.days
        await message.answer(f"üéñÔ∏è –°—ñ–∑–¥–µ –±–µ–ª—Å–µ–Ω–¥—ñ –∂–∞–∑—ã–ª—ã–º –±–∞—Ä (”©–Ω—ñ–º ID:{product_id}). “ö–∞–ª“ì–∞–Ω –∫“Ø–Ω–¥–µ—Ä: {days} –∫“Ø–Ω.")
    else:
        await message.answer("–°—ñ–∑–¥—ñ“£ –∂–∞–∑—ã–ª—ã–º –º–µ—Ä–∑—ñ–º—ñ –∞—è“õ—Ç–∞–ª“ì–∞–Ω. “ö–∞–π—Ç–∞ –∂–∞–∑—ã–ª—ã“£—ã–∑ /pay –∞—Ä“õ—ã–ª—ã.")

# ------------------ ”ò–ö–Ü–ú–®–Ü: ”©–Ω—ñ–º–¥–µ—Ä–¥—ñ –±–∞—Å“õ–∞—Ä—É (–∏–Ω–ª–∞–π–Ω + –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä) ------------------
def admin_only(user_id: int) -> bool:
    return user_id == ADMIN_ID

@router.message(Command("admin"))
async def admin_panel(message: Message):
    if not admin_only(message.from_user.id):
        return await message.answer("üö´ “ö“±“õ—ã“£—ã–∑ –∂–æ“õ.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ ”®–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin:products")],
        [InlineKeyboardButton(text="‚ûï –ñ–∞“£–∞ ”©–Ω—ñ–º “õ–æ—Å—É (–ø”ô—Ä–º–µ–Ω –∞—Ä“õ—ã–ª—ã)", callback_data="admin:add_product_help")],
        [InlineKeyboardButton(text="üìú “ö–∞–π—Ç–∞—Ä—É–ª–∞—Ä (–∂—É—Ä–Ω–∞–ª)", callback_data="admin:refunds")],
    ])
    await message.answer("‚öôÔ∏è ”ò–∫—ñ–º—à—ñ —Ç–∞“õ—Ç–∞—Å—ã:", reply_markup=kb)

@router.callback_query(F.data == "admin:home")
async def admin_home(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã“£ –∂–æ“õ", show_alert=True)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ ”®–Ω—ñ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ", callback_data="admin:products")],
        [InlineKeyboardButton(text="‚ûï –ñ–∞“£–∞ ”©–Ω—ñ–º “õ–æ—Å—É (–ø”ô—Ä–º–µ–Ω –∞—Ä“õ—ã–ª—ã)", callback_data="admin:add_product_help")],
        [InlineKeyboardButton(text="üìú “ö–∞–π—Ç–∞—Ä—É–ª–∞—Ä (–∂—É—Ä–Ω–∞–ª)", callback_data="admin:refunds")],
    ])
    await callback.message.edit_text("‚öôÔ∏è ”ò–∫—ñ–º—à—ñ —Ç–∞“õ—Ç–∞—Å—ã:", reply_markup=kb)

@router.callback_query(F.data == "admin:products")
async def admin_products_list(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã“£ –∂–æ“õ", show_alert=True)

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, title, amount, currency, duration_days, active FROM products ORDER BY id DESC") as cur:
            rows = await cur.fetchall()

    if not rows:
        return await callback.message.edit_text("”®–Ω—ñ–º–¥–µ—Ä –∂–æ“õ. /add_product –∞—Ä“õ—ã–ª—ã “õ–æ—Å—ã“£—ã–∑.")

    text = "<b>üì¶ –ë–∞—Ä–ª—ã“õ ”©–Ω—ñ–º–¥–µ—Ä:</b>\n\n"
    kb_rows = []
    for r in rows:
        pid, title, amount, currency, duration, active = r
        status = "‚úÖ" if active else "‚õî"
        text += f"ID:{pid} | {status} {title} ‚Äî {amount} {currency} | dur:{duration}d\n"
        kb_rows.append([
            InlineKeyboardButton(text=f"‚úèÔ∏è {pid}", callback_data=f"admin:product:edit:{pid}"),
            InlineKeyboardButton(text=f"üóëÔ∏è {pid}", callback_data=f"admin:product:del:{pid}")
        ])
    kb_rows.append([InlineKeyboardButton(text="üè† –ë–∞—Å—Ç—ã", callback_data="admin:home")])
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    await callback.message.edit_text(text, reply_markup=kb)

@router.callback_query(F.data.startswith("admin:product:edit:"))
async def admin_product_edit_cb(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã –∂–æ“õ", show_alert=True)
    try:
        pid = int(callback.data.split(":", 3)[-1])
    except:
        return await callback.answer("“ö–∞—Ç–µ ID", show_alert=True)

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT id, title, description, amount, currency, duration_days, active FROM products WHERE id = ?", (pid,)) as cur:
            row = await cur.fetchone()
    if not row:
        return await callback.answer("”®–Ω—ñ–º —Ç–∞–±—ã–ª–º–∞–¥—ã.", show_alert=True)

    pid, title, desc, amount, currency, duration, active = row
    status_text = "–ë–µ–ª—Å–µ–Ω–¥—ñ" if active else "”®—à—ñ—Ä—ñ–ª–≥–µ–Ω"
    txt = f"ID:{pid}\n{title}\n{desc or ''}\n–°–æ–º–∞(raw):{amount} {currency}\n–ú–µ—Ä–∑—ñ–º(days):{duration}\n–°—Ç–∞—Ç—É—Å: {status_text}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–æ“õ—Ç–∞—Ç—É/“ö–æ—Å—É", callback_data=f"admin:product:toggle:{pid}")],
        [InlineKeyboardButton(text="”®“£–¥–µ—É (–∫–æ–º–∞–Ω–¥–∞)", callback_data=f"admin:product:editcmd:{pid}")],
        [InlineKeyboardButton(text="üóëÔ∏è –ñ–æ—é", callback_data=f"admin:product:del:{pid}")],
        [InlineKeyboardButton(text="üì¶ –¢—ñ–∑—ñ–º–≥–µ –æ—Ä–∞–ª—É", callback_data="admin:products")]
    ])
    await callback.message.edit_text(txt, reply_markup=kb)

@router.callback_query(F.data.startswith("admin:product:toggle:"))
async def admin_product_toggle(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã –∂–æ“õ", show_alert=True)
    pid = int(callback.data.split(":", 3)[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT active FROM products WHERE id = ?", (pid,)) as cur:
            row = await cur.fetchone()
        if not row:
            return await callback.answer("”®–Ω—ñ–º —Ç–∞–±—ã–ª–º–∞–¥—ã.", show_alert=True)
        new = 0 if row[0] else 1
        await db.execute("UPDATE products SET active = ? WHERE id = ?", (new, pid))
        await db.commit()
    await callback.answer("”®–Ω—ñ–º —Å—Ç–∞—Ç—É—Å—ã –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.")
    await callback.message.edit_text("”®–Ω—ñ–º —Å—Ç–∞—Ç—É—Å—ã ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ. /admin “õ–∞–π—Ç–∞ –∞—à—ã“£—ã–∑ –Ω–µ–º–µ—Å–µ '–¢—ñ–∑—ñ–º–≥–µ –æ—Ä–∞–ª—É' –±–∞—Å—ã“£—ã–∑.")

@router.callback_query(F.data.startswith("admin:product:del:"))
async def admin_product_delete(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã –∂–æ“õ", show_alert=True)
    pid = int(callback.data.split(":", 3)[-1])
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM products WHERE id = ?", (pid,))
        await db.commit()
    await callback.answer("”®–Ω—ñ–º –∂–æ–π—ã–ª–¥—ã.")
    await callback.message.edit_text("”®–Ω—ñ–º –∂–æ–π—ã–ª–¥—ã. /admin –∞—Ä“õ—ã–ª—ã —Ç—ñ–∑—ñ–º–¥—ñ “õ–∞–π—Ç–∞ –∞—à—ã“£—ã–∑.")

@router.callback_query(F.data.startswith("admin:product:editcmd:"))
async def admin_product_editcmd(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã“£ –∂–æ“õ", show_alert=True)

    pid = int(callback.data.split(":", 3)[-1])
    await callback.answer()
    await callback.message.edit_text(
        f"–ë“±–ª ”©–Ω—ñ–º–¥—ñ –ø”ô—Ä–º–µ–Ω –∞—Ä“õ—ã–ª—ã ”©“£–¥–µ—É “Ø—à—ñ–Ω:\n"
        f"<code>/edit_product {pid}|Title|amount|duration_days|Description</code>\n\n"
        "–ú—ã—Å–∞–ª—ã:\n"
        f"<code>/edit_product {pid}|Premium|100|30|Premium –∂–∞–∑—ã–ª—ã–º</code>",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin:add_product_help")
async def admin_add_help(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã“£ –∂–æ“õ", show_alert=True)
    await callback.answer()
    await callback.message.edit_text(
        "–ñ–∞“£–∞ ”©–Ω—ñ–º “õ–æ—Å—É —Ñ–æ—Ä–º–∞—Ç—ã–º–µ–Ω –∫–æ–º–∞–Ω–¥–∞:\n"
        "<code>/add_product Title|amount|duration_days|Description</code>\n\n"
        "–ú—ã—Å–∞–ª:\n"
        "<code>/add_product Premium 1‚≠ê|1|30|Premium –∂–∞–∑—ã–ª—ã–º 30 –∫“Ø–Ω</code>\n\n"
        "–ï—Å–∫–µ—Ä—Ç—É: amount ‚Äî raw integer (Stars smallest unit)."
    )

# –ö–æ–º–∞–Ω–¥–∞–ª—ã“õ “õ–æ—Å—É
@router.message(Command("add_product"))
async def cmd_add_product(message: Message, command: CommandObject):
    if not admin_only(message.from_user.id):
        return await message.answer("“ö“±“õ—ã“£ –∂–æ“õ")
    if not command.args:
        return await message.answer("–ë–∞–ø—Ç–∞—É–ª–∞—Ä “õ–∞–∂–µ—Ç. –ü—ñ—à—ñ–º: /add_product Title|amount|duration_days|Description")

    try:
        parts = command.args.split("|", 3)
        title = parts[0].strip()
        amount = int(parts[1].strip())
        duration = int(parts[2].strip()) if parts[2].strip() else 0
        description = parts[3].strip() if len(parts) > 3 else ""
    except Exception as e:
        return await message.answer(f"–ë–∞–ø—Ç–∞—É “õ–∞—Ç–µ: {e}\n–ü—ñ—à—ñ–º: /add_product Title|amount|duration_days|Description")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO products (title, description, amount, currency, duration_days, active) VALUES (?, ?, ?, ?, ?, 1)",
            (title, description, amount, CURRENCY, duration),
        )
        await db.commit()
    await message.answer("‚úÖ ”®–Ω—ñ–º “õ–æ—Å—ã–ª–¥—ã.")

@router.message(Command("edit_product"))
async def cmd_edit_product(message: Message, command: CommandObject):
    if not admin_only(message.from_user.id):
        return await message.answer("“ö“±“õ—ã“£ –∂–æ“õ")
    if not command.args:
        return await message.answer("–ü—ñ—à—ñ–º: /edit_product id|Title|amount|duration_days|Description")

    try:
        parts = command.args.split("|", 4)
        pid = int(parts[0].strip())
        title = parts[1].strip()
        amount = int(parts[2].strip())
        duration = int(parts[3].strip())
        description = parts[4].strip() if len(parts) > 4 else ""
    except Exception as e:
        return await message.answer(f"–ë–∞–ø—Ç–∞—É “õ–∞—Ç–µ: {e}\n–ü—ñ—à—ñ–º: /edit_product id|Title|amount|duration_days|Description")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE products SET title = ?, description = ?, amount = ?, duration_days = ? WHERE id = ?",
            (title, description, amount, duration, pid),
        )
        await db.commit()
    await message.answer("‚úÖ ”®–Ω—ñ–º –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã.")

@router.message(Command("set_product_status"))
async def cmd_set_prod_status(message: Message, command: CommandObject):
    if not admin_only(message.from_user.id):
        return await message.answer("“ö“±“õ—ã“£ –∂–æ“õ")
    if not command.args:
        return await message.answer("–ü—ñ—à—ñ–º: /set_product_status <id> <0|1>", parse_mode=None)

    try:
        parts = command.args.split()
        pid = int(parts[0])
        status = 1 if parts[1] == "1" else 0
    except Exception:
        return await message.answer("“ö–∞—Ç–µ –±–∞–ø—Ç–∞—É. /set_product_status <id> <0|1>", parse_mode=None)

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE products SET active = ? WHERE id = ?", (status, pid))
        await db.commit()
    await message.answer("–°—Ç–∞—Ç—É—Å ”©–∑–≥–µ—Ä—Ç—ñ–ª–¥—ñ.")

@router.message(Command("delete_product"))
async def cmd_delete_product(message: Message, command: CommandObject):
    if not admin_only(message.from_user.id):
        return await message.answer("“ö“±“õ—ã“£ –∂–æ“õ")
    if not command.args:
        return await message.answer("–ü—ñ—à—ñ–º: /delete_product <id>", parse_mode=None)
    try:
        pid = int(command.args.strip())
    except:
        return await message.answer("ID —Å–∞–Ω –±–æ–ª—É—ã —Ç–∏—ñ—Å.")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM products WHERE id = ?", (pid,))
        await db.commit()
    await message.answer("”®–Ω—ñ–º –∂–æ–π—ã–ª–¥—ã.")

# -----------------------------------------
# /stats –ø”ô—Ä–º–µ–Ω—ñ (—Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ)
# -----------------------------------------
@router.message(Command("stats"))
async def cmd_stats(message: Message):
    if not admin_only(message.from_user.id):
        await message.answer("–ë“±–ª –ø”ô—Ä–º–µ–Ω —Ç–µ–∫ ”ô–∫—ñ–º—à—ñ–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω üö´")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT COUNT(*), SUM(amount) FROM payments") as cur:
            row = await cur.fetchone()
    total_payments, total_amount = (row or (0, 0))
    total_payments = total_payments or 0
    total_amount = total_amount or 0

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–¢”©–ª–µ–º —Å–∞–Ω—ã: {total_payments}\n"
        f"–ñ–∞–ª–ø—ã –∂–∏–Ω–∞–ª“ì–∞–Ω (raw): {total_amount} {CURRENCY}"
    )

# ------------------ Refund –º–∞—Ä–∫–µ—Ä–ª–µ—É (admin only) ------------------
@router.message(Command("mark_refund"))
async def cmd_mark_refund(message: Message, command: CommandObject):
    if not admin_only(message.from_user.id):
        return await message.answer("“ö“±“õ—ã“£ –∂–æ“õ")
    if not command.args:
        return await message.answer("–ü—ñ—à—ñ–º: /mark_refund <charge_id>", parse_mode=None)
    cid = command.args.strip()
    now = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE payments SET refunded = 1 WHERE charge_id = ?", (cid,))
        await db.execute(
            "INSERT INTO refunds (charge_id, admin_id, reason, date) VALUES (?, ?, ?, ?)",
            (cid, message.from_user.id, "Manual refund marked", now),
        )
        await db.commit()
        async with db.execute("SELECT user_id FROM payments WHERE charge_id = ?", (cid,)) as cur:
            row = await cur.fetchone()
    await message.answer(f"‚úÖ {cid} –∂–µ—Ä–≥—ñ–ª—ñ–∫—Ç—ñ —Ç“Ø—Ä–¥–µ “õ–∞–π—Ç–∞—Ä—ã–ª–¥—ã (–º–∞—Ä–∫–µ—Ä–ª–µ–Ω–¥—ñ).")
    if row:
        user_id = row[0]
        try:
            await bot.send_message(user_id, f"–°—ñ–∑–¥—ñ“£ —Ç”©–ª–µ–º—ñ“£—ñ–∑ (ID: <code>{cid}</code>) ”ô–∫—ñ–º—à—ñ —Ç–∞—Ä–∞–ø—ã–Ω–∞–Ω “õ–∞–π—Ç–∞—Ä—ã–ª“ì–∞–Ω.")
        except Exception:
            logger.exception("Notify user refund failed")

# ------------------ Admin: refunds list ------------------
@router.callback_query(F.data == "admin:refunds")
async def admin_refunds_list(callback: CallbackQuery):
    if not admin_only(callback.from_user.id):
        return await callback.answer("“ö“±“õ—ã“£ –∂–æ“õ", show_alert=True)
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT charge_id, admin_id, reason, date FROM refunds ORDER BY id DESC LIMIT 20") as cur:
            rows = await cur.fetchall()
    if not rows:
        return await callback.message.edit_text("“ö–∞–π—Ç–∞—Ä—É–ª–∞—Ä –∂–æ“õ.")
    text = "<b>üìú “ö–∞–π—Ç–∞—Ä—É–ª–∞—Ä (–∂—É—Ä–Ω–∞–ª):</b>\n\n"
    for cid, aid, reason, date in rows:
        text += f"{cid} ‚Äî admin:{aid} ‚Äî {reason} ‚Äî {date}\n"
    await callback.message.edit_text(text)

# ------------------ Catch-all echo (—Å–∞“õ—Ç—ã“õ–ø–µ–Ω) ------------------
@router.message()
async def echo_catch_all(message: Message):
    # –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä“ì–∞ –∫–µ–¥–µ—Ä–≥—ñ –∂–∞—Å–∞–º–∞—É “Ø—à—ñ–Ω —Ç–µ–∫ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä –µ–º–µ—Å —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä–¥—ã “õ–∞–π—Ç–∞–ª–∞–π–º—ã–∑
    if message.text and message.text.startswith("/"):
        await message.answer("–ë–µ–ª–≥—ñ—Å—ñ–∑ –ø”ô—Ä–º–µ–Ω. /help “õ–∞—Ä–∞“£—ã–∑.")
    else:
        try:
            # message.send_copy –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ –∞—Ä“õ—ã–ª—ã –∫–æ–Ω—Ç–µ–Ω—Ç-—Ç—ñ “õ–∞–π—Ç–∞–ª–∞–π–º—ã–∑
            await message.send_copy(chat_id=message.chat.id)
        except Exception:
            # –∫–µ–π–±—ñ—Ä —Ç–∏–ø—Ç–µ—Ä “õ–∞–π—Ç–∞–ª–∞–Ω–±–∞–π–¥—ã ‚Äî –∂–∞–π —Ç—ã–Ω—ã—à—Ç—ã“õ —Å–∞“õ—Ç–∞—É
            pass

# ------------------ –ù–µ–≥—ñ–∑–≥—ñ —ñ—Å–∫–µ “õ–æ—Å—É ------------------
async def main():
    logger.info("–î“ö “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—ñ–ª—ñ–ø –∂–∞—Ç—ã—Ä...")
    await init_db()
    logger.info("–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª—É“ì–∞ –¥–∞–π—ã–Ω.")
    # Long polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Stopped by user")
